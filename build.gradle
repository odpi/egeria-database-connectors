/*
 * SPDX-License-Identifier: Apache-2.0
 * Copyright Contributors to the ODPi Egeria project.
 */

/*
 * Used for Build scripts/plugins only
*/

buildscript {
    repositories {

        maven { url("https://oss.sonatype.org/content/repositories/snapshots") }
        mavenCentral()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.1'
    }
    tasks.withType(JavaCompile) {
        configure(options) {
            options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked' // examples
        }
    }
}

/*
 * Plugins for this parent module only - so just high level project related
 */

/* run './gradlew aggregateJavadocs' at top level to build all docs & output to build/docs/javadoc */
apply plugin: 'nebula-aggregate-javadocs'

/*
 * Configuration for all projects - INCLUDING this one
 */

allprojects {

    // Published artifact info, equired for maven publishing - this is the version of our artifact
    group = 'org.odpi.egeria'
    version = '3.6-SNAPSHOT'

    apply plugin: 'idea'

    // This enforces version checking but is slow to process
    //apply plugin: 'nebula.lint'
    //gradleLint {
    //    rules = ['all-dependency'] // TODO: Change to criticalRules when ready to enforce
    //
    //}

}

/*
 * Configuration for sub projects only
 */

subprojects {

    ext {
        egeriaVersion = '3.7-SNAPSHOT'
    }

    apply plugin: 'java-library'
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    if (System.getenv("CI")) {
        apply plugin: 'signing'
    }

    repositories {
        mavenCentral()
        maven { url("https://oss.sonatype.org/content/repositories/snapshots") }
    }

    // ensures we pick up the very latest snapshots when built
    configurations.all {
        // check for updates every build
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    dependencies {
        constraints
                {
                    implementation "org.postgresql:postgresql:42.3.2"
                    implementation "org.slf4j:slf4j-api:1.7.35"
                    implementation "org.odpi.egeria:data-manager-client:${egeriaVersion}"
                    implementation "org.odpi.egeria:data-manager-api:${egeriaVersion}"
                    implementation "org.odpi.egeria:database-integrator-api:${egeriaVersion}"
                    implementation "org.odpi.egeria:open-connector-framework:${egeriaVersion}"
                }
        test {
            useJUnitPlatform {
                includeEngines 'junit-jupiter'
            }
        }
    }
    // Maven Central (technically sonatype oss) requires we distribute source and javadoc
    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        withJavadocJar()
        withSourcesJar()
    }
    // More Java language settings
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        sourceCompatibility = "11"
        targetCompatibility = "11"
        options.incremental = true
        options.fork = true
        options.failOnError = true
        options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
    }

    // For later java versions this is recommended - keep conditional in case we want to build on 8
    javadoc {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    //need to decide who owns the testing infrastructure
    //random junit versions picked below.
    test {
        useJUnitPlatform()
        dependencies {
            testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
            testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
        }

        testLogging {
            events "passed", "skipped", "failed"
        }

        reports {
            html.required = true
        }

    }

    // We only have a single artifact for now - this additional metadata is
    // required for publishing to maven central. Only doing signing in 'CI'
    publishing {
        publications {
            connector(MavenPublication) {
                from components.java
                pom {
                    url = 'http://egeria.odpi.org'
                    licenses {
                        // Code
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                        // Docs
                        license {
                            name = 'Creative Commons Attribution 4.0 International (CC BY 4.0)'
                            url = 'https://creativecommons.org/licenses/by/4.0'
                        }
                    }
                    developers {
                        developer {
                            id = 'planetf1'
                            name = 'Nigel Jones'
                            email = 'nigel.l.jones+git@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/odpi/egeria-database-connectors.git'
                        developerConnection = 'scm:git:ssh://github.com/odpi/egeria/egeria-database-connectors.git'
                        url = 'http://github.com/odpi/egeria-database-connectors/'
                    }
                }
                // Override the project name & description for the pom based on properties set in the child build.gradle (hard to default & required for maven central)
                pom.withXml {
                    asNode().appendNode('name', "${project.ext.name}")
                    asNode().appendNode('description', "${project.description}")
                }
            }
        }

        // Release versions get pushed to staging area on maven central, snapshots to snapshot repo
        // Secrets for credentials
        if (System.getenv("CI")) {
            repositories {
                maven {
                    name = 'OSSRH'
                    def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
                    def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    // User token (under profile) on oss.sonatype.org
                    credentials {
                        username = System.getenv("OSSRH_USERNAME")
                        password = System.getenv("OSSRH_TOKEN")
                    }
                }
            }
        }
    }

    // To publish to ossrh we need to sign the artifacts - only in CI
    if (System.getenv("CI")) {
        signing {
            // This is the publication to sign
            sign publishing.publications.connector
            // gpg --export-secret-keys myemal@gmail.com | base64
            def signingKey = System.getenv("OSSRH_GPG_PRIVATE_KEY")
            // Passphrase for key
            def signingPassword = System.getenv("OSSRH_GPG_PASSPHRASE")
            // public key id (last 8 characters only) - note keys also need uploading to all the main registries
            def signingKeyId = System.getenv("OSSRH_GPG_KEYID")
            // We use these values from secrets rather than gradle.properties
            useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        }
    }
}


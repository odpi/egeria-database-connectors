/*
 * SPDX-License-Identifier: Apache-2.0
 * Copyright Contributors to the ODPi Egeria project.
 */

/*
 * Used for Build scripts/plugins only
*/

buildscript {
    repositories {
        maven { url("https://oss.sonatype.org/content/repositories/snapshots") }
        mavenCentral()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.1'
    }
    tasks.withType(JavaCompile) {
        configure(options) {
            options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked' // examples
        }
    }
}

/*
 * Plugins for this parent module only - so just high level project related
 */


plugins {
        //id "nebula.lint" version "16.9.0"
        //id "nebula-aggregate-javadocs"
    }

/* run './gradlew aggregateJavadocs' at top level to build all docs & output to build/docs/javadoc */
apply plugin: 'nebula-aggregate-javadocs'

/*
 * Configuration for all projects - INCLUDING this one
 */



allprojects {

    // Published artifact info, equired for maven publishing - this is the version of our artifact
    group = 'org.odpi.egeria'
    version = '2.11-SNAPSHOT'

    apply plugin: 'idea'

    repositories {
         mavenCentral()
         maven { url("https://oss.sonatype.org/content/repositories/snapshots")}
    }


    // This enforces version checking but is slow to process
    //apply plugin: 'nebula.lint'
    //gradleLint {
    //    rules = ['all-dependency'] // TODO: Change to criticalRules when ready to enforce
    //
    //}

}

/*
 * Configuration for sub projects only
 */

subprojects {

    apply plugin: 'java-library'

    // Mostly java, so default to this for now
    apply plugin: 'java'

    // As we've migrated from maven - we'll assume all submodules publish directly to maven
    apply plugin: 'maven-publish'

    ext {
        egeriaVersion = '3.0-SNAPSHOT'
    }

    // ensures we pick up the very latest snapshots when built
    configurations.all {
        // check for updates every build
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    dependencies {
        constraints
                {
                    implementation "org.postgresql:postgresql:42.2.20"
                    implementation "org.slf4j:slf4j-api:1.7.30"
                    implementation "org.odpi.egeria:data-manager-client:${egeriaVersion}"
                    implementation "org.odpi.egeria:data-manager-api:${egeriaVersion}"
                    implementation "org.odpi.egeria:database-integrator-api:${egeriaVersion}"
                    implementation "org.odpi.egeria:open-connector-framework:${egeriaVersion}"
                }
        test {
            useJUnitPlatform {
                includeEngines 'junit-jupiter'
            }
        }

        // Maven Central (technically sonatype oss) requires we distribute source and javadoc
        java {
            sourceCompatibility = "VERSION_1_8"
            targetCompatibility = "VERSION_1_8"
            withJavadocJar()
            withSourcesJar()
        }

        // Only apply the signing plugin if we're running in the build environment since
        // this is dependent on having access to sonatype, and suitable GPG keys
        if (System.getenv("CI"))  {
            apply plugin: 'signing'
            // Artifacts need signing for maven central - supplied by GitHub secrets
        }

    }

    // sources required to publish a legitimate maven package for distribution
    java {
        withSourcesJar()
    }

    // For later java versions this is recommended - keep conditional in case we want to build on 8
    javadoc {
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    //need to decide who owns the testing infrastructure
    //random junit versions picked below.
    test {
        useJUnitPlatform()
        dependencies {
            testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
            testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
        }

        testLogging {
            events "passed", "skipped", "failed"
        }

        reports {
            html.enabled = true
        }

    }

    // publish maven package
    publishing {
        publications {
            maven(MavenPublication) {
                from(components.java)
            }
        }
    }

    // Java language settings
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
        options.incremental = true
        options.fork = true
        options.failOnError = true
    }
}

